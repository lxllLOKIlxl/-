import streamlit as st
import random
from datetime import datetime, timedelta

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∏–ª—é
def set_background(theme):
    if theme == "–ö–æ—Å–º—ñ—á–Ω–∏–π —Ñ–æ–Ω":
        st.markdown(
            """
            <style>
                body {
                    background-image: url('https://images.unsplash.com/photo-1496307042754-b4aa456c4a2d');
                    background-size: cover;
                    color: white;
                }
                .stTextInput, .stButton > button {
                    background-color: rgba(0, 0, 0, 0.6);
                    border-radius: 10px;
                    color: white;
                    font-weight: bold;
                }
                .stTextInput input {
                    color: white;
                }
            </style>
            """,
            unsafe_allow_html=True
        )
    elif theme == "–ß–æ—Ä–Ω–∏–π –º–µ—Ç–∞–ª—ñ–∫":
        st.markdown(
            """
            <style>
                body {
                    background-color: #1a1a1a;
                    color: white;
                }
                .stTextInput, .stButton > button {
                    background-color: #333;
                    border-radius: 10px;
                    color: white;
                    font-weight: bold;
                }
                .stTextInput input {
                    color: white;
                }
            </style>
            """,
            unsafe_allow_html=True
        )
    elif theme == "–°–∏–Ω—ñ–π –º–µ—Ç–∞–ª—ñ–∫":
        st.markdown(
            """
            <style>
                body {
                    background-color: #003366;
                    color: white;
                }
                .stTextInput, .stButton > button {
                    background-color: #00509E;
                    border-radius: 10px;
                    color: white;
                    font-weight: bold;
                }
                .stTextInput input {
                    color: white;
                }
            </style>
            """,
            unsafe_allow_html=True
        )

# –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–µ–º–∞
if "theme" not in st.session_state:
    st.session_state["theme"] = "–ö–æ—Å–º—ñ—á–Ω–∏–π —Ñ–æ–Ω"

# –í–∏–±—ñ—Ä —Ç–µ–º–∏
theme = st.selectbox("üåå –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ–Ω:", ["–ö–æ—Å–º—ñ—á–Ω–∏–π —Ñ–æ–Ω", "–ß–æ—Ä–Ω–∏–π –º–µ—Ç–∞–ª—ñ–∫", "–°–∏–Ω—ñ–π –º–µ—Ç–∞–ª—ñ–∫"])
if theme != st.session_state["theme"]:
    st.session_state["theme"] = theme

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ñ–æ–Ω—É
set_background(st.session_state["theme"])

# –ù–∞–∑–≤–∞ –≥—Ä–∏
st.title("üöÄ –ö–æ–¥–æ–Ω–∞–≤—Ç: –ö–æ—Å–º—ñ—á–Ω–∞ –ø—Ä–∏–≥–æ–¥–∞")

# –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ
if "planet" not in st.session_state:
    st.session_state["planet"] = 1
if "score" not in st.session_state:
    st.session_state["score"] = 0
if "lives" not in st.session_state:
    st.session_state["lives"] = 10
if "last_life_restore" not in st.session_state:
    st.session_state["last_life_restore"] = datetime.now()
if "username" not in st.session_state:
    st.session_state["username"] = st.text_input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω—ñ–∫:", value="–ì—Ä–∞–≤–µ—Ü—å")

# –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–∏—Ç—Ç—ñ–≤
if st.session_state["lives"] < 10:
    time_diff = datetime.now() - st.session_state["last_life_restore"]
    if time_diff >= timedelta(minutes=10):
        restore_lives = time_diff.seconds // 600
        st.session_state["lives"] += restore_lives
        st.session_state["lives"] = min(st.session_state["lives"], 10)
        st.session_state["last_life_restore"] = datetime.now()

# –û–ø–∏—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
st.write(f"üåç –ü–ª–∞–Ω–µ—Ç–∞ #{st.session_state['planet']}. –í–∞—à–∞ –º–µ—Ç–∞: –Ω–∞–±—Ä–∞—Ç–∏ 100 –æ—á–∫—ñ–≤, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—ñ–≤–µ–Ω—å!")
st.write(f"üë§ –ì—Ä–∞–≤–µ—Ü—å: {st.session_state['username']}")
st.write(f"üíØ –†–∞—Ö—É–Ω–æ–∫: {st.session_state['score']}")
st.write(f"‚ù§Ô∏è –ñ–∏—Ç—Ç—è: {st.session_state['lives']} / 10")

# –ó–∞–¥–∞—á–∞
task = random.choice([
    {"question": "–©–æ —Ç–∞–∫–µ 2 + 2?", "answer": "4"},
    {"question": "–Ø–∫–∞ –ø–ª–∞–Ω–µ—Ç–∞ —Ç—Ä–µ—Ç—è –≤—ñ–¥ –°–æ–Ω—Ü—è?", "answer": "–ó–µ–º–ª—è"},
    {"question": "–Ø–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 10 // 3?", "answer": "3"},
    {"question": "–Ø–∫–∞ –Ω–∞–π–±–ª–∏–∂—á–∞ –∑—ñ—Ä–∫–∞ –¥–æ –ó–µ–º–ª—ñ?", "answer": "–°–æ–Ω—Ü–µ"}
])

st.markdown(f"### üåå –ü–∏—Ç–∞–Ω–Ω—è: {task['question']}")
user_answer = st.text_input("–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", "")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
if st.button("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏"):
    if st.session_state["lives"] > 0:
        if user_answer.strip().lower() == task["answer"].lower():
            st.session_state["score"] += 10
            st.success("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ 10 –æ—á–∫—ñ–≤.")
        else:
            st.session_state["lives"] -= 1
            st.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∏ –≤—Ç—Ä–∞—Ç–∏–ª–∏ 1 –∂–∏—Ç—Ç—è.")
    else:
        st.warning("–£ –≤–∞—Å –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—è –∂–∏—Ç—Ç—è. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è, –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å –≥—Ä—É!")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—è
if st.session_state["score"] >= 100:
    st.session_state["planet"] += 1
    st.session_state["score"] = 0
    st.write("üéâ –í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É –ø–ª–∞–Ω–µ—Ç—É!")

# –¢–∞–π–º–µ—Ä –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∂–∏—Ç—Ç—è
if st.session_state["lives"] < 10:
    next_life_in = timedelta(minutes=10) - (datetime.now() - st.session_state["last_life_restore"])
    minutes, seconds = divmod(next_life_in.seconds, 60)
    st.write(f"‚è≥ –ù–∞—Å—Ç—É–ø–Ω–µ –∂–∏—Ç—Ç—è —á–µ—Ä–µ–∑: {minutes} —Ö–≤ {seconds} —Å.")

# –í—ñ—Ç–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Ä—ñ–≤–Ω—è
if st.session_state["planet"] > 5:
    st.balloons()
    st.write(f"üéâ –í—ñ—Ç–∞—î–º–æ, {st.session_state['username']}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–æ—Å–º—ñ—á–Ω—É –ø—Ä–∏–≥–æ–¥—É!")
