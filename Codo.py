import streamlit as st
import random
from datetime import datetime, timedelta
import time

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(page_title="–ö–æ–¥–æ–Ω–∞–≤—Ç: –ö–æ—Å–º—ñ—á–Ω–∞ –ü—Ä–∏–≥–æ–¥–∞", page_icon="üöÄ")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω—å –∑–∞ —Ä—ñ–≤–Ω—è–º–∏
def generate_questions():
    return {
        1: [
            {"question": "–©–æ —Ç–∞–∫–µ 2 + 2?", "answer": "4", "difficulty": "–ª–µ–≥–∫–æ"},
            {"question": "–Ø–∫–∞ –ø–ª–∞–Ω–µ—Ç–∞ —Ç—Ä–µ—Ç—è –≤—ñ–¥ –°–æ–Ω—Ü—è?", "answer": "–ó–µ–º–ª—è", "difficulty": "–ª–µ–≥–∫–æ"},
            {"question": "–Ø–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: 10 // 3?", "answer": "3", "difficulty": "–ª–µ–≥–∫–æ"},
            {"question": "–Ø–∫–∞ –Ω–∞–π–±–ª–∏–∂—á–∞ –∑—ñ—Ä–∫–∞ –¥–æ –ó–µ–º–ª—ñ?", "answer": "–°–æ–Ω—Ü–µ", "difficulty": "–ª–µ–≥–∫–æ"},
            {"question": "–°—Ç–æ–ª–∏—Ü—è –£–∫—Ä–∞—ó–Ω–∏?", "answer": "–ö–∏—ó–≤", "difficulty": "–ª–µ–≥–∫–æ"},
        ],
        2: [
            {"question": "–°–∫—ñ–ª—å–∫–∏ –ø–ª–∞–Ω–µ—Ç —É –°–æ–Ω—è—á–Ω—ñ–π —Å–∏—Å—Ç–µ–º—ñ?", "answer": "8", "difficulty": "—Å–µ—Ä–µ–¥–Ω—å–æ"},
            {"question": "–©–æ —Ç–∞–∫–µ 9 * 9?", "answer": "81", "difficulty": "—Å–µ—Ä–µ–¥–Ω—å–æ"},
            {"question": "–Ø–∫–∞ –ø–ª–∞–Ω–µ—Ç–∞ –Ω–∞–π–±–ª–∏–∂—á–µ –¥–æ –°–æ–Ω—Ü—è?", "answer": "–ú–µ—Ä–∫—É—Ä—ñ–π", "difficulty": "—Å–µ—Ä–µ–¥–Ω—å–æ"},
            {"question": "–Ø–∫–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤–æ–¥–∏?", "answer": "H2O", "difficulty": "—Å–µ—Ä–µ–¥–Ω—å–æ"},
            {"question": "–•—Ç–æ –Ω–∞–ø–∏—Å–∞–≤ '–ö–æ–±–∑–∞—Ä'?", "answer": "–¢–∞—Ä–∞—Å –®–µ–≤—á–µ–Ω–∫–æ", "difficulty": "—Å–µ—Ä–µ–¥–Ω—å–æ"},
        ],
        3: [
            {"question": "–©–æ —Ç–∞–∫–µ 12 * 12?", "answer": "144", "difficulty": "—Å–∫–ª–∞–¥–Ω–æ"},
            {"question": "–Ø–∫–∏–π —Å—É–ø—É—Ç–Ω–∏–∫ –æ–±–µ—Ä—Ç–∞—î—Ç—å—Å—è –Ω–∞–≤–∫–æ–ª–æ –ó–µ–º–ª—ñ?", "answer": "–ú—ñ—Å—è—Ü—å", "difficulty": "—Å–∫–ª–∞–¥–Ω–æ"},
            {"question": "–Ø–∫–∞ —Ö—ñ–º—ñ—á–Ω–∞ —Ñ–æ—Ä–º—É–ª–∞ –≤—É–≥–ª–µ–∫–∏—Å–ª–æ–≥–æ –≥–∞–∑—É?", "answer": "CO2", "difficulty": "—Å–∫–ª–∞–¥–Ω–æ"},
            {"question": "–•—Ç–æ –≤—ñ–¥–∫—Ä–∏–≤ –ø–µ–Ω—ñ—Ü–∏–ª—ñ–Ω?", "answer": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –§–ª–µ–º—ñ–Ω–≥", "difficulty": "—Å–∫–ª–∞–¥–Ω–æ"},
            {"question": "–Ø–∫–∞ –Ω–∞–π–≤–∏—â–∞ –≥–æ—Ä–∞ —É —Å–≤—ñ—Ç—ñ?", "answer": "–ï–≤–µ—Ä–µ—Å—Ç", "difficulty": "—Å–∫–ª–∞–¥–Ω–æ"},
        ],
        4: [
            {"question": "–Ø–∫–∞ —Å—Ç–æ–ª–∏—Ü—è –Ø–ø–æ–Ω—ñ—ó?", "answer": "–¢–æ–∫—ñ–æ", "difficulty": "–¥—É–∂–µ —Å–∫–ª–∞–¥–Ω–æ"},
            {"question": "–©–æ —Ç–∞–∫–µ 2 –≤ —Å—Ç—É–ø–µ–Ω—ñ 8?", "answer": "256", "difficulty": "–¥—É–∂–µ —Å–∫–ª–∞–¥–Ω–æ"},
            {"question": "–Ø–∫–∞ –ø–ª–∞–Ω–µ—Ç–∞ –≤—ñ–¥–æ–º–∞ —Å–≤–æ—ó–º–∏ –∫—ñ–ª—å—Ü—è–º–∏?", "answer": "–°–∞—Ç—É—Ä–Ω", "difficulty": "–¥—É–∂–µ —Å–∫–ª–∞–¥–Ω–æ"},
            {"question": "–•—Ç–æ —î –∞–≤—Ç–æ—Ä–æ–º '–ì–∞–º–ª–µ—Ç–∞'?", "answer": "–í—ñ–ª—å—è–º –®–µ–∫—Å–ø—ñ—Ä", "difficulty": "–¥—É–∂–µ —Å–∫–ª–∞–¥–Ω–æ"},
            {"question": "–°–∫—ñ–ª—å–∫–∏ –Ω–æ—Ç –≤ –æ–∫—Ç–∞–≤—ñ?", "answer": "8", "difficulty": "–¥—É–∂–µ —Å–∫–ª–∞–¥–Ω–æ"},
        ]
    }

# –ü–æ—á–∞—Ç–∫–æ–≤–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Å—ñ—ó
if "username" not in st.session_state:
    st.session_state["username"] = None
if "planet" not in st.session_state:
    st.session_state["planet"] = 1
if "score" not in st.session_state:
    st.session_state["score"] = 0
if "lives" not in st.session_state:
    st.session_state["lives"] = 3
if "last_life_restore" not in st.session_state:
    st.session_state["last_life_restore"] = datetime.now()
if "current_question" not in st.session_state:
    st.session_state["current_question"] = None
if "question_pool" not in st.session_state:
    st.session_state["question_pool"] = []
if "level_completed" not in st.session_state:
    st.session_state["level_completed"] = False
if "game_over" not in st.session_state:
    st.session_state["game_over"] = False
if "hint_used" not in st.session_state:
    st.session_state["hint_used"] = False

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç–∞–Ω—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
def load_questions():
    st.session_state["question_pool"] = generate_questions().get(st.session_state["planet"], [])
    if st.session_state["question_pool"]:
        random.shuffle(st.session_state["question_pool"])
        st.session_state["current_question"] = st.session_state["question_pool"].pop()
        st.session_state["hint_used"] = False
    else:
        st.session_state["current_question"] = None
        st.session_state["level_completed"] = True

# –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
def next_level():
    st.session_state["planet"] += 1
    st.session_state["score"] += st.session_state.get("level_score", 0) # –ó–∞—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–∞—Ö—É–Ω–æ–∫ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å
    st.session_state["lives"] = 3
    st.session_state["level_completed"] = False
    st.session_state["level_score"] = 0
    load_questions()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
def check_answer():
    if st.session_state["current_question"] and "user_answer" in st.session_state:
        if st.session_state["user_answer"].strip().lower() == st.session_state["current_question"]["answer"].lower():
            st.success(f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ 10 –æ—á–∫—ñ–≤ ({st.session_state['current_question']['difficulty']}).")
            st.session_state["score"] += 10
            st.session_state["level_score"] = st.session_state.get("level_score", 0) + 10
            st.session_state["user_answer"] = ""
            st.session_state["current_question"] = None # –ü–∏—Ç–∞–Ω–Ω—è –≤–∏–¥–∞–ª—è—î—Ç—å—Å—è –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            st.experimental_rerun()
        else:
            st.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. ({st.session_state['current_question']['difficulty']})")
            st.session_state["lives"] -= 1
            st.session_state["user_answer"] = ""

# –ü–æ–∫–∞–∑–∞—Ç–∏ –ø—ñ–¥–∫–∞–∑–∫—É
def show_hint():
    if st.session_state["current_question"] and not st.session_state["hint_used"]:
        answer = st.session_state["current_question"]["answer"]
        if len(answer) > 3:
            hint = "*" * (len(answer) - 2) + answer[-2:]
            st.info(f"üí° –ü—ñ–¥–∫–∞–∑–∫–∞: –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ '{answer[-2:]}'.")
            st.session_state["hint_used"] = True
        else:
            st.info("ü§î –ü—ñ–¥–∫–∞–∑–∫–∞ –¥–ª—è —Ü—ñ—î—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –≥—Ä–∏
st.title("üöÄ –ö–æ–¥–æ–Ω–∞–≤—Ç: –ö–æ—Å–º—ñ—á–Ω–∞ –ü—Ä–∏–≥–æ–¥–∞")
st.markdown("---")

# –í–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ –≥—Ä–∞–≤—Ü—è
if not st.session_state["username"]:
    st.session_state["username"] = st.text_input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è, —é–Ω–∏–π –∫–æ–¥–Ω–∞–≤—Ç–µ:")
    if st.session_state["username"]:
        st.info(f"–ü—Ä–∏–≤—ñ—Ç, {st.session_state['username']}! –ì–æ—Ç–æ–≤—ñ –¥–æ –∫–æ—Å–º—ñ—á–Ω–æ—ó –ø–æ–¥–æ—Ä–æ–∂—ñ?")
        load_questions()
        st.experimental_rerun()

# –û—Å–Ω–æ–≤–Ω–∏–π –±–ª–æ–∫ –≥—Ä–∏
if st.session_state["username"]:
    with st.sidebar:
        st.header(f"–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –¥–ª—è {st.session_state['username']}")
        st.write(f"**‚ù§Ô∏è –ñ–∏—Ç—Ç—è:** {st.session_state['lives']}")
        st.write(f"**üíØ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫:** {st.session_state['score']}")
        st.write(f"**üåç –ü–ª–∞–Ω–µ—Ç–∞:** {st.session_state['planet']}")
        st.write(f"**‚≠ê –†–∞—Ö—É–Ω–æ–∫ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—ñ:** {st.session_state.get('level_score', 0)}")

        if st.session_state["lives"] > 0 and not st.session_state["game_over"]:
            if st.button("–ó–¥–∞—Ç–∏—Å—å"):
                st.session_state["lives"] = 0
                st.experimental_rerun()

    st.header(f"ü™ê –ü–ª–∞–Ω–µ—Ç–∞ {st.session_state['planet']}")

    if st.session_state["lives"] > 0 and not st.session_state["game_over"]:
        if st.session_state["current_question"]:
            st.subheader("‚ùì –ó–∞–ø–∏—Ç–∞–Ω–Ω—è:")
            st.markdown(f"> {st.session_state['current_question']['question']}")
            st.session_state["user_answer"] = st.text_input("–í–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å:", key="answer_input")

            cols = st.columns(2)
            with cols[0]:
                if st.button("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏"):
                    check_answer()
                    if st.session_state["current_question"] is None and st.session_state["lives"] > 0:
                        if not st.session_state["question_pool"]:
                            st.session_state["level_completed"] = True
                            st.experimental_rerun()
                        else:
                            st.session_state["current_question"] = st.session_state["question_pool"].pop()
                            st.session_state["hint_used"] = False
                            st.experimental_rerun()
            with cols[1]:
                if st.button("–ü—ñ–¥–∫–∞–∑–∫–∞"):
                    show_hint()

        elif st.session_state["level_completed"]:
            st.balloons()
            st.success(f"üéâ –í—ñ—Ç–∞—î–º–æ, {st.session_state['username']}! –í–∏ –ø—Ä–æ–π—à–ª–∏ –ø–ª–∞–Ω–µ—Ç—É {st.session_state['planet']}!")
            if st.session_state["planet"] < len(generate_questions()):
                if st.button(f"üöÄ –í–∏—Ä—É—à–∏—Ç–∏ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É {st.session_state['planet'] + 1}"):
                    next_level()
                    st.experimental_rerun()
            else:
                st.info("‚ú® –í–∏ –¥–æ—Å–ª—ñ–¥–∏–ª–∏ –≤—Å—ñ –ø–ª–∞–Ω–µ—Ç–∏! –í–∞—à–∞ –∫–æ—Å–º—ñ—á–Ω–∞ –ø–æ–¥–æ—Ä–æ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                st.session_state["game_over"] = True
                st.experimental_rerun()
        else:
            if st.session_state["lives"] > 0 and not st.session_state["game_over"]:
                if not st.session_state["question_pool"]:
                    st.info("ü§î –ó–∞–ø–∏—Ç–∞–Ω–Ω—è –Ω–∞ —Ü—ñ–π –ø–ª–∞–Ω–µ—Ç—ñ –∑–∞–∫—ñ–Ω—á–∏–ª–∏—Å—å. –ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É.")
                    if st.session_state["planet"] < len(generate_questions()):
                        if st.button(f"‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø–ª–∞–Ω–µ—Ç—É {st.session_state['planet'] + 1}"):
                            next_level()
                            st.experimental_rerun()
                    else:
                        st.info("‚ú® –í–∏ –¥–æ—Å–ª—ñ–¥–∏–ª–∏ –≤—Å—ñ –ø–ª–∞–Ω–µ—Ç–∏! –í–∞—à–∞ –∫–æ—Å–º—ñ—á–Ω–∞ –ø–æ–¥–æ—Ä–æ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                        st.session_state["game_over"] = True
                        st.experimental_rerun()
                else:
                    load_questions()
                    st.experimental_rerun()

    elif st.session_state["lives"] <= 0:
        st.error(f"üíÄ –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞, {st.session_state['username']}! –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ –∂–∏—Ç—Ç—è.")
        st.subheader(f"–í–∞—à —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {st.session_state['score']}")
        if st.button("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É"):
            for key in st.session_state.keys():
                del st.session_state[key]
            st.experimental_rerun()

    elif st.session_state["game_over"]:
        st.info("‚ú® –î—è–∫—É—î–º–æ –∑–∞ –≥—Ä—É, –∫–æ–¥–Ω–∞–≤—Ç–µ!")
        if st.button("üîÑ –ü–æ—á–∞—Ç–∏ –Ω–æ–≤—É –≥—Ä—É"):
            for key in st.session_state.keys():
                del st.session_state[key]
            st.experimental_rerun()

else:
    st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.")
